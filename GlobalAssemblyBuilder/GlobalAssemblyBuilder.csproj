<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{66A9CFF0-0A42-42AC-B7A5-DB8F350DAF62}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>GlobalAssemblyBuilder</RootNamespace>
    <AssemblyName>GlobalAssemblyBuilder</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>..\obj\Debug\GlobalAssemblyBuilder\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>..\obj\Release\GlobalAssemblyBuilder\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Data" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="Properties\CustomAttributes.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Properties\AssemblyInfo.cs.template" />
  </ItemGroup>
  <ItemGroup>
    <Content Include="..\ProjectConfig.txt">
      <Link>ProjectConfig.txt</Link>
    </Content>
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <UsingTask TaskName="VersionGeneratorTask" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <AssemblyInfoTemplate ParameterType="System.String" Required="true" />
      <OutputFile ParameterType="System.String" Required="true" />
      <ConfigFile ParameterType="System.String" Required="true" />
      <VersionNumber ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        StreamReader templateReader = new StreamReader(this.AssemblyInfoTemplate);
        StreamWriter assemblyInfoWriter = new StreamWriter(this.OutputFile, false);
        var customAttributeOutPath = this.OutputFile.Replace("AssemblyInfo", "CustomAttributes");
        StreamWriter customAttributeWriter = new StreamWriter(customAttributeOutPath, false);
        customAttributeWriter.WriteLine("using System;");
        customAttributeWriter.WriteLine("namespace DriveProxy.API {");

        customAttributeWriter.WriteLine(
          "[AttributeUsage(AttributeTargets.Assembly, AllowMultiple=false)]");
        customAttributeWriter.WriteLine("public class DPSAttribute : Attribute {");
        customAttributeWriter.WriteLine("public DPSAttribute(string value)");
        customAttributeWriter.WriteLine("{ this.attr_ = value; }");
        customAttributeWriter.WriteLine("public string attr_;");
        customAttributeWriter.WriteLine("}");
        Log.LogMessage(string.Format("Writing: {0} From: {1} Using: {2}",
                                     this.OutputFile,
                                     this.AssemblyInfoTemplate,
                                     this.ConfigFile),
                       MessageImportance.High);
        string line = null;
        while ((line = templateReader.ReadLine()) != null)
          assemblyInfoWriter.WriteLine(line);
        templateReader.Close();
        StreamReader configReader = new StreamReader(this.ConfigFile);
        while ((line = configReader.ReadLine()) != null)
        {
          string name = line.Substring(0, line.IndexOf(' '));
          string value = line.Substring(line.IndexOf(' ') + 1);
          if (name == "Version")
          {
            string fullVersion = value;
            assemblyInfoWriter.WriteLine(
              string.Format("[assembly: AssemblyVersion(\"{0}\")]", fullVersion));
            assemblyInfoWriter.WriteLine(
              string.Format("[assembly: AssemblyInformationalVersion(\"{0}\")]", fullVersion));
          }
          else if (name == "Title")
          {
            assemblyInfoWriter.WriteLine(
              string.Format("[assembly: AssemblyTitle(\"{0}\")]", value));
          }
          else if (name == "Description")
          {
            assemblyInfoWriter.WriteLine(
              string.Format("[assembly: AssemblyDescription(\"{0}\")]", value));
          }
          else if (name == "Company")
          {
            assemblyInfoWriter.WriteLine(
              string.Format("[assembly: AssemblyCompany(\"{0}\")]", value));
          }
          else if (name == "Product")
          {
            assemblyInfoWriter.WriteLine(
              string.Format("[assembly: AssemblyProduct(\"{0}\")]", value));
          }
          else if (name == "Copyright")
          {
            assemblyInfoWriter.WriteLine(
              string.Format("[assembly: AssemblyCopyright(\"{0}\")]", value));
          }
          else
          {
            assemblyInfoWriter.WriteLine(
              string.Format("[assembly: {0}Attr(@\"{1}\")]", name, value));
            customAttributeWriter.WriteLine(
              "[AttributeUsage(AttributeTargets.Assembly, AllowMultiple=false)]");
            customAttributeWriter.WriteLine(string.Format(
              "public sealed class {0}Attr : DPSAttribute {{", name));
            customAttributeWriter.WriteLine(string.Format(
              "public {0}Attr(string value) : base(value)", name));
            customAttributeWriter.WriteLine(string.Format("{{  }}", name));
            customAttributeWriter.WriteLine("}");
          }
        }
        customAttributeWriter.WriteLine("}");
        customAttributeWriter.Close();
        configReader.Close();

        assemblyInfoWriter.Close();

      </Code>
    </Task>
  </UsingTask>
  <Target Name="BeforeBuild">
    <VersionGeneratorTask AssemblyInfoTemplate="$(ProjectDir)Properties\AssemblyInfo.cs.template" OutputFile="$(ProjectDir)Properties\AssemblyInfo.cs" ConfigFile="$(ProjectDir)..\ProjectConfig.txt">
      <Output TaskParameter="VersionNumber" PropertyName="VersionNumberProperty" />
    </VersionGeneratorTask>
  </Target>
  <Target Name="AfterBuild">
  </Target>
</Project>
